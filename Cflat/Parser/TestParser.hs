module Main where
import Cflat.Parser.Parser
import Cflat.Type.Type
import Test.HUnit
import Control.Monad.State
import Control.Exception
import System.Directory
import System.Environment
main = do
    getProgName >>= print
    runTestTT test_parse_file

apply_test file = (do
  ret <- parseFile file
  return $ case ret of
    Nothing -> False
    _           -> True) @? file
test_parse_file = "parse from file" ~: test [ 
                                 "dummy" ~:  True @? ""
                                 ,"add" ~:  apply_test "../test/add.cb"
                                 ,"addressof" ~:  apply_test "../test/addressof.cb"
                                 ,"alloca" ~: apply_test "../test/alloca.cb"
                                 ,"alloca2" ~: apply_test "../test/alloca2.cb"
                                 ,"aref-semcheck" ~: apply_test "../test/aref-semcheck.cb"
                                 ,"aref-semcheck2" ~: apply_test "../test/aref-semcheck2.cb"
                                 ,"array-semcheck1" ~: apply_test "../test/array-semcheck1.cb"
                                 ,"array" ~: apply_test "../test/array.cb"
                                 ,"array2" ~: apply_test "../test/array2.cb"
                                 ,"assign" ~: apply_test "../test/assign.cb"
                                 ,"assoc" ~: apply_test "../test/assoc.cb"
                                 ,"bitand" ~: apply_test "../test/bitand.cb"
                                 ,"bitnot" ~: apply_test "../test/bitnot.cb"
                                 ,"bitor" ~: apply_test "../test/bitor.cb"
                                 ,"bitxor" ~: apply_test "../test/bitxor.cb"
                                 ,"block" ~: apply_test "../test/block.cb"
                                 ,"break-semcheck" ~: apply_test "../test/break-semcheck.cb"
                                 ,"cast" ~: apply_test "../test/cast.cb"
                                 ,"cast2" ~: apply_test "../test/cast2.cb"
                                 ,"charops" ~: apply_test "../test/charops.cb"
                                 ,"charops2" ~: apply_test "../test/charops2.cb"
                                 ,"comm" ~: apply_test "../test/comm.cb"
                                 ,"condexpr" ~: apply_test "../test/condexpr.cb"
                                 ,"const" ~: apply_test "../test/const.cb"
                                 ,"continue-semcheck" ~: apply_test "../test/continue-semcheck.cb"
                                 ,"dec" ~: apply_test "../test/dec.cb"
                                 ,"decloverride" ~: apply_test "../test/decloverride.cb"
                                 ,"decloverride2" ~: apply_test "../test/decloverride2.cb"
                                 ,"defun-semcheck" ~: apply_test "../test/defun-semcheck.cb"
                                 ,"defun-semcheck2" ~: apply_test "../test/defun-semcheck2.cb"
                                 ,"defun-semcheck3" ~: apply_test "../test/defun-semcheck3.cb"
                                 ,"defun-semcheck4" ~: apply_test "../test/defun-semcheck4.cb"
                                 ,"defun-semcheck5" ~: apply_test "../test/defun-semcheck5.cb"
                                 ,"defun-semcheck6" ~: apply_test "../test/defun-semcheck6.cb"
                                 ,"defun-semcheck7" ~: apply_test "../test/defun-semcheck7.cb"
                                 ,"defun-semcheck8" ~: apply_test "../test/defun-semcheck8.cb"
                                 ,"defvar" ~: apply_test "../test/defvar.cb"
                                 ,"deref-semcheck1" ~: apply_test "../test/deref-semcheck1.cb"
                                 ,"deref-semcheck2" ~: apply_test "../test/deref-semcheck2.cb"
                                 ,"deref-semcheck3" ~: apply_test "../test/deref-semcheck3.cb"
                                 ,"deref-semcheck4" ~: apply_test "../test/deref-semcheck4.cb"
                                 ,"deref-semcheck5" ~: apply_test "../test/deref-semcheck5.cb"
                                 ,"div" ~: apply_test "../test/div.cb"
                                 ,"dowhile-break" ~: apply_test "../test/dowhile-break.cb"
                                 ,"dowhile-continue" ~: apply_test "../test/dowhile-continue.cb"
                                 ,"dowhile1" ~: apply_test "../test/dowhile1.cb"
                                 ,"dowhile2" ~: apply_test "../test/dowhile2.cb"
                                 ,"dowhile3" ~: apply_test "../test/dowhile3.cb"
                                 ,"duplicated-import" ~: apply_test "../test/duplicated-import.cb"
                                 ,"empstruct" ~: apply_test "../test/empstruct.cb"
                                 ,"eq" ~: apply_test "../test/eq.cb"
                                 ,"for-break" ~: apply_test "../test/for-break.cb"
                                 ,"for-continue" ~: apply_test "../test/for-continue.cb"
                                 ,"for1" ~: apply_test "../test/for1.cb"
                                 ,"fork" ~: apply_test "../test/fork.cb"
                                 ,"funcall-semcheck" ~: apply_test "../test/funcall-semcheck.cb"
                                 ,"funcall-semcheck2" ~: apply_test "../test/funcall-semcheck2.cb"
                                 ,"funcall0" ~: apply_test "../test/funcall0.cb"
                                 ,"funcall1" ~: apply_test "../test/funcall1.cb"
                                 ,"funcall2" ~: apply_test "../test/funcall2.cb"
                                 ,"funcall3" ~: apply_test "../test/funcall3.cb"
                                 ,"funcall4" ~: apply_test "../test/funcall4.cb"
                                 ,"funcall5" ~: apply_test "../test/funcall5.cb"
                                 ,"funcptr" ~: apply_test "../test/funcptr.cb"
                                 ,"gt" ~: apply_test "../test/gt.cb"
                                 ,"gteq" ~: apply_test "../test/gteq.cb"
                                 ,"gvar" ~: apply_test "../test/gvar.cb"
                                 ,"hello" ~: apply_test "../test/hello.cb"
                                 ,"hello2" ~: apply_test "../test/hello2.cb"
                                 ,"hello3" ~: apply_test "../test/hello3.cb"
                                 ,"hello4" ~: apply_test "../test/hello4.cb"
                                 ,"if1" ~: apply_test "../test/if1.cb"
                                 ,"if2" ~: apply_test "../test/if2.cb"
                                 ,"implicitaddr" ~: apply_test "../test/implicitaddr.cb"
                                 ,"inc" ~: apply_test "../test/inc.cb"
                                 ,"initializer" ~: apply_test "../test/initializer.cb"
                                 ,"integer" ~: apply_test "../test/integer.cb"
                                 ,"intops" ~: apply_test "../test/intops.cb"
                                 ,"invalidstmt1" ~: apply_test "../test/invalidstmt1.cb"
                                 ,"invalidstmt2" ~: apply_test "../test/invalidstmt2.cb"
                                 ,"logicaland" ~: apply_test "../test/logicaland.cb"
                                 ,"logicalnot" ~: apply_test "../test/logicalnot.cb"
                                 ,"logicalor" ~: apply_test "../test/logicalor.cb"
                                 ,"longops" ~: apply_test "../test/longops.cb"
                                 ,"lshift" ~: apply_test "../test/lshift.cb"
                                 ,"lt" ~: apply_test "../test/lt.cb"
                                 ,"lteq" ~: apply_test "../test/lteq.cb"
                                 ,"lvar1" ~: apply_test "../test/lvar1.cb"
                                 ,"lvar2" ~: apply_test "../test/lvar2.cb"
                                 ,"mdarray" ~: apply_test "../test/mdarray.cb"
                                 ,"mdarray2" ~: apply_test "../test/mdarray2.cb"
                                 ,"mod" ~: apply_test "../test/mod.cb"
                                 ,"mul" ~: apply_test "../test/mul.cb"
                                 ,"neq" ~: apply_test "../test/neq.cb"
                                 ,"noreturn" ~: apply_test "../test/noreturn.cb"
                                 ,"one" ~: apply_test "../test/one.cb"
                                 ,"opassign" ~: apply_test "../test/opassign.cb"
                                 ,"param" ~: apply_test "../test/param.cb"
                                 ,"pointer" ~: apply_test "../test/pointer.cb"
                                 ,"pointer2" ~: apply_test "../test/pointer2.cb"
                                 ,"pointer3" ~: apply_test "../test/pointer3.cb"
                                 ,"pointer4" ~: apply_test "../test/pointer4.cb"
                                 ,"ptrarray" ~: apply_test "../test/ptrarray.cb"
                                 ,"ptrdiff" ~: apply_test "../test/ptrdiff.cb"
                                 ,"ptrmemb" ~: apply_test "../test/ptrmemb.cb"
                                 ,"ptrmemb2" ~: apply_test "../test/ptrmemb2.cb"
                                 ,"recursivetypedef" ~: apply_test "../test/recursivetypedef.cb"
                                 ,"rshift" ~: apply_test "../test/rshift.cb"
                                 ,"scomm" ~: apply_test "../test/scomm.cb"
                                 ,"setjmptest" ~: apply_test "../test/setjmptest.cb"
                                 ,"sgvar" ~: apply_test "../test/sgvar.cb"
                                 ,"shortops" ~: apply_test "../test/shortops.cb"
                                 ,"shortops2" ~: apply_test "../test/shortops2.cb"
                                 ,"sizeof-expr" ~: apply_test "../test/sizeof-expr.cb"
                                 ,"sizeof-struct" ~: apply_test "../test/sizeof-struct.cb"
                                 ,"sizeof-type" ~: apply_test "../test/sizeof-type.cb"
                                 ,"sizeof-union" ~: apply_test "../test/sizeof-union.cb"
                                 ,"slcomm" ~: apply_test "../test/slcomm.cb"
                                 ,"slvar" ~: apply_test "../test/slvar.cb"
                                 ,"src1" ~: apply_test "../test/src1.cb"
                                 ,"src2" ~: apply_test "../test/src2.cb"
                                 ,"staticfunc" ~: apply_test "../test/staticfunc.cb"
                                 ,"string" ~: apply_test "../test/string.cb"
                                 ,"struct-semcheck" ~: apply_test "../test/struct-semcheck.cb"
                                 ,"struct-semcheck10" ~: apply_test "../test/struct-semcheck10.cb"
                                 ,"struct-semcheck2" ~: apply_test "../test/struct-semcheck2.cb"
                                 ,"struct-semcheck3" ~: apply_test "../test/struct-semcheck3.cb"
                                 ,"struct-semcheck4" ~: apply_test "../test/struct-semcheck4.cb"
                                 ,"struct-semcheck5" ~: apply_test "../test/struct-semcheck5.cb"
                                 ,"struct-semcheck6" ~: apply_test "../test/struct-semcheck6.cb"
                                 ,"struct-semcheck7" ~: apply_test "../test/struct-semcheck7.cb"
                                 ,"struct-semcheck8" ~: apply_test "../test/struct-semcheck8.cb"
                                 ,"struct-semcheck9" ~: apply_test "../test/struct-semcheck9.cb"
                                 ,"struct" ~: apply_test "../test/struct.cb"
                                 ,"struct2" ~: apply_test "../test/struct2.cb"
                                 ,"struct3" ~: apply_test "../test/struct3.cb"
                                 ,"sub" ~: apply_test "../test/sub.cb"
                                 ,"switch" ~: apply_test "../test/switch.cb"
                                 ,"syntax1" ~: apply_test "../test/syntax1.cb"
                                 ,"syntax2" ~: apply_test "../test/syntax2.cb"
                                 ,"syntax3" ~: apply_test "../test/syntax3.cb"
                                 ,"textwrite" ~: apply_test "../test/textwrite.cb"
                                 ,"ucharops" ~: apply_test "../test/ucharops.cb"
                                 ,"ucharops2" ~: apply_test "../test/ucharops2.cb"
                                 ,"uintops" ~: apply_test "../test/uintops.cb"
                                 ,"ulongops" ~: apply_test "../test/ulongops.cb"
                                 ,"unaryminus" ~: apply_test "../test/unaryminus.cb"
                                 ,"unaryplus" ~: apply_test "../test/unaryplus.cb"
                                 ,"union-semcheck" ~: apply_test "../test/union-semcheck.cb"
                                 ,"union-semcheck10" ~: apply_test "../test/union-semcheck10.cb"
                                 ,"union-semcheck2" ~: apply_test "../test/union-semcheck2.cb"
                                 ,"union-semcheck3" ~: apply_test "../test/union-semcheck3.cb"
                                 ,"union-semcheck4" ~: apply_test "../test/union-semcheck4.cb"
                                 ,"union-semcheck5" ~: apply_test "../test/union-semcheck5.cb"
                                 ,"union-semcheck6" ~: apply_test "../test/union-semcheck6.cb"
                                 ,"union-semcheck7" ~: apply_test "../test/union-semcheck7.cb"
                                 ,"union-semcheck8" ~: apply_test "../test/union-semcheck8.cb"
                                 ,"union-semcheck9" ~: apply_test "../test/union-semcheck9.cb"
                                 ,"union" ~: apply_test "../test/union.cb"
                                 ,"usertype" ~: apply_test "../test/usertype.cb"
                                 ,"ushortops" ~: apply_test "../test/ushortops.cb"
                                 ,"ushortops2" ~: apply_test "../test/ushortops2.cb"
                                 ,"utf" ~: apply_test "../test/utf.cb"
                                 ,"validstmt1" ~: apply_test "../test/validstmt1.cb"
                                 ,"var-semcheck" ~: apply_test "../test/var-semcheck.cb"
                                 ,"varargs" ~: apply_test "../test/varargs.cb"
                                 ,"vardecl" ~: apply_test "../test/vardecl.cb"
                                 ,"while-break" ~: apply_test "../test/while-break.cb"
                                 ,"while-continue" ~: apply_test "../test/while-continue.cb"
                                 ,"while1" ~: apply_test "../test/while1.cb"
                                 ,"while2" ~: apply_test "../test/while2.cb"
                                 ,"while3" ~: apply_test "../test/while3.cb"
                                 ,"zero" ~: apply_test "../test/zero.cb"
                                 ,"addressof" ~:  apply_test "../test/addressof.cb"
                                 ]
createEmptyFile file = writeFile file "this is temp file"
testIO = "createEmptyFile" ~:
         (do 
           (bracket
             (return ())
             -- (\dmy  -> return ())
             (\dmy  -> removeFile file)
             (\dmy' -> (do
                 (doesFileExist file >>= return . not) @? "Pre-condition test: File already exist."
                 createEmptyFile file
                 exi <- doesFileExist file
                 exi @? "file is not exists."
                 txt <- readFile file
                 txt @=? "this is temp file")))
           (doesFileExist file >>= \ret -> return . not $ ret) @? "Post-condition test: file is not removed.")
       where file = "sample.txt"
